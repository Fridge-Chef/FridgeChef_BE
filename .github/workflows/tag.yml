name: Auto Labeling PR based on Commit Messages

on:
  pull_request:
    types: [opened, edited, synchronize]
  push:
    branches:
      - '**'  # 모든 브랜치에 대해 푸시 이벤트를 트리거

jobs:
  label-pr:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get commit messages
        id: commits
        run: |
          # 커밋 메시지 가져오기
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            COMMITS=$(git log --oneline ${{ github.event.before }}..${{ github.sha }} --pretty=format:"%s")
          else
            COMMITS=$(git log --oneline HEAD~10..HEAD --pretty=format:"%s")
          fi
          echo "COMMITS=$COMMITS"

      - name: Determine labels
        id: determine_labels
        run: |
          # 1순위: Domain Labels
          DOMAIN_LABELS=("image" "user" "board" "security" "recipe" "mail" "ingredient" "tag")
          # 2순위: Setting Labels
          SETTING_LABELS=("ci/cd" "config" "gradle" "build" "bug")
          # 3순위: Code Labels
          CODE_LABELS=("refactor" "update" "style")

          LABELS=()

          # 1순위: Domain Label 최대 5개
          for LABEL in "${DOMAIN_LABELS[@]}"; do
            if [[ "$COMMITS" == *"$LABEL"* ]]; then
              LABELS+=("$LABEL")
              if [ "${#LABELS[@]}" -ge 5 ]; then
                break
              fi
            fi
          done

          # 2순위: Setting Label 최대 2개
          if [ "${#LABELS[@]}" -lt 5 ]; then
            for LABEL in "${SETTING_LABELS[@]}"; do
              if [[ "$COMMITS" == *"$LABEL"* ]]; then
                LABELS+=("$LABEL")
                if [ "${#LABELS[@]}" -ge 5 ]; then
                  break
                fi
              fi
            done
          fi

          # 3순위: Code Label 최대 1개
          if [ "${#LABELS[@]}" -lt 5 ]; then
            for LABEL in "${CODE_LABELS[@]}"; do
              if [[ "$COMMITS" == *"$LABEL"* ]]; then
                LABELS+=("$LABEL")
                if [ "${#LABELS[@]}" -ge 5 ]; then
                  break
                fi
              fi
            done
          fi

          echo "FINAL_LABELS=${LABELS[@]}"
          echo "FINAL_LABELS=${LABELS[@]}" >> $GITHUB_ENV

      - name: Create missing labels
        run: |
          for LABEL in ${{ env.FINAL_LABELS }}; do
            LABEL_EXISTS=$(gh api graphql -f query='
            {
              repository(owner: "${{ github.repository_owner }}", name: "${{ github.event.repository.name }}") {
                labels(first: 100) {
                  nodes {
                    name
                  }
                }
              }
            }' | jq -r '.data.repository.labels.nodes[] | select(.name == "'$LABEL'")')

            if [ -z "$LABEL_EXISTS" ]; then
              COLOR=$(openssl rand -hex 3)  # 랜덤 색상 생성
              gh api \
                --method POST \
                -H "Accept: application/vnd.github+json" \
                /repos/${{ github.repository }}/labels \
                -f name="$LABEL" \
                -f color="$COLOR"
              echo "Created label: $LABEL with color: $COLOR"
            else
              echo "Label $LABEL already exists"
            fi
          done

      - name: Add labels to PR
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            gh pr edit ${{ github.event.pull_request.number }} --add-label "${{ env.FINAL_LABELS }}"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Add labels to commit push
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            # Push 이벤트에서는 별도로 작업을 정의할 수 있습니다.
            echo "Labels added for push event"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
